name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Set global defaults, including the working directory
defaults:
  run:
    working-directory: ./src  # Default working directory for all jobs and steps

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up .NET Core using the repository-level DOTNET_VERSION environment variable
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ vars.DOTNET_VERSION }}  # Using repository-level environment variable

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Build the solution
    - name: Build solution
      run: dotnet build --configuration Release /p:OutputPath=../artifacts

    # Upload build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: ./src/artifacts/**/*.nupkg

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up .NET Core using the repository-level DOTNET_VERSION environment variable
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ vars.DOTNET_VERSION }}

    # Run tests
    - name: Run tests
      run: dotnet test --configuration Release --no-build

  bump-version:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.head_commit.message, 'release v') }}
    needs: [build, test]

    # override working directory for this job
    defaults:
      run:
        working-directory: ./

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0   # Ensures that we have access to the full commit history

      - name: Extract Version and Description
        id: extract_version_description
        run: |
          FULL_MESSAGE="${{ github.event.head_commit.message }}"

          SUMMARY=$(echo "$FULL_MESSAGE" | head -n 1)
          DESCRIPTION=$(echo "$FULL_MESSAGE" | tail -n +3)

          if [[ $SUMMARY =~ ^release\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            echo "Commit message does not match the pattern 'release vx.x.x'"
            exit 1
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          printf "DESCRIPTION<<EOF\n%s\nEOF\n" "$DESCRIPTION" >> $GITHUB_ENV

          echo "Bumping version to $VERSION"

      - name: Run Version Bump Script
        run: |
          echo "Current directory: $(pwd)"
          chmod +x ./bump_version.sh
          ./bump_version.sh "$VERSION"

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for Changes
        id: check_changes
        run: |
          # Check if there are any changes to commit
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "changes=false" >> $GITHUB_ENV
          fi

      - name: Commit and Push Changes
        id: commit_version_bump  # Capture this step ID to get the commit SHA
        if: env.changes == 'true'
        run: |
          # Commit the changes with the specified message
          git add .
          git commit -m "Bump to v$VERSION"

          # Push changes back to main
          git push origin main
        env:
          VERSION: ${{ env.VERSION }}

      - name: Get Commit SHA
        run: echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release  # Capture the release ID for uploading assets
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"                  # Release tag, like "v1.2.3"
          commitish: "${{ env.COMMIT_SHA }}"     # Ensures the release points to the bump commit
          release_name: "v${{ env.VERSION }}"              # Title of the release, same as the tag
          body: "${{ env.DESCRIPTION }}"                   # Release notes from commit message
          draft: false                                     # Make the release public immediately
          prerelease: false                                # Mark it as a stable release

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use upload_url instead of release_id
          asset_path: ./Nino.unitypackage  # Path to the asset file
          asset_name: Nino.unitypackage    # Name of the asset in the release
          asset_content_type: application/octet-stream

  push-to-nuget:
    runs-on: ubuntu-latest
    needs: [build, test, bump-version]

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up .NET Core using the repository-level DOTNET_VERSION environment variable
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ vars.DOTNET_VERSION }}

    # Download build artifacts
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: artifacts
        path: ./src/artifacts
        
    - name: List downloaded files
      run: ls -la ./artifacts

    # Push NuGet packages
    - name: Push NuGet Packages
      run: |
        for package in ./artifacts/*.nupkg; do
          dotnet nuget push "$package" --api-key ${{ secrets.MYTOKEN }} --source https://api.nuget.org/v3/index.json
        done
